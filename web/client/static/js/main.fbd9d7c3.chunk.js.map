{"version":3,"sources":["Reducers/User.js","Reducers/Device.js","Reducers/Record.js","Reducers/index.js","Actions/types.js","Components/General/RequiresAuth.js","Components/General/Spinner.js","Actions/user.js","Actions/auth.js","Actions/device.js","Actions/records.js","Actions/index.js","Components/Landing/SignUp.js","Components/Landing/Login.js","Components/Landing/Landing.js","Components/Dashboard/Graph.js","Components/Dashboard/DateButton.js","Components/Dashboard/Chart.js","Components/Dashboard/DataTable.js","Components/Dashboard/DeviceInfo.js","Components/Dashboard/Gauge.js","Components/Dashboard/Gauges.js","Components/Dashboard/LogoutButton.js","Components/Dashboard/Menu.js","Components/Dashboard/ModifyUser.js","Components/Dashboard/DeviceDropDown.js","Components/Dashboard/DeviceMenu.js","Components/Dashboard/Modal.js","Components/Dashboard/Dashboard.js","Components/App.js","index.js"],"names":["INITIAL_STATE","id","email","selectedDevice","devices","selected","all","today","combineReducers","user","state","arguments","length","undefined","action","type","payload","Object","objectSpread","device","deviceName","dev_name","obj","keys","map","key","devArry","forEach","dev","settings","records","record","newSet","push","latest","td","moment","format","date","data","General_RequiresAuth","WrappedComponent","RequiresAuth","_Component","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","inherits","createClass","value","Cookies","get","props","history","nextProps","console","log","react_default","a","createElement","Component","withRouter","Spinner","className","updateUser","login","signUp","logOut","addDevice","updateDevice","updateDevices","deleteDevice","setSelectedDevice","updateRecord","setDeviceRecords","setSelectedRecord","Actions","User","Auth","Device","Records","CREATE_USER","gql","_templateObject","SignUp","password","loading","errorMsg","handleClick","createUser","_this$state","_this","setState","variables","loadingBtn","_ref","onClick","setError","error","msg","message","slice","indexOf","remove","_this2","setDisplay","onChange","event","target","react_apollo_browser_umd","mutation","onError","onCompleted","token","set","_ref2","connect","actions","LOGIN_USER","Login_templateObject","Login","loginUser","name","htmlFor","Landing","display","landing","renderCenter","Landing_Login","Landing_SignUp","Graph","width","height","saveRef","ref","containerNode","_this$containerNode","clientWidth","clientHeight","measure","nextState","dataType","d","toConsumableArray","es6","margin","top","right","left","bottom","dataKey","stroke","ticks","tickSize","fill","RECORD_ONE_DAY","DateButton_templateObject","deviceId","_useState","useState","_useState2","slicedToArray","expanded","setExpanded","_useState3","_useState4","setToken","useEffect","oneDayQuery","asyncToGenerator","regenerator_default","mark","_callee","client","_ref3","recordOneDay","wrap","_context","prev","next","query","sent","stop","_x","renderRecords","i","e","_ref4","liClick","concat","setDataType","Dashboard_Graph","Dashboard_DateButton","label","buttonClass","toLowerCase","currentTarget","DataTable_templateObject","DATA_SUBSCRIPTION","_templateObject2","RenderBody","subscribeToNewData","reversedData","measurment","time","light","temp","humidity","moisture","userId","subscribeToMore","DataTable_RenderBody","document","updateQuery","subscriptionData","dataArray","NewTableBody","UPDATE_DEVICE","DeviceInfo_templateObject","average","tol","_settings$key","__typename","newName","setNewName","lightAvg","setLightAvg","_useState5","_useState6","lightTol","setLightTol","_useState7","_useState8","tempAvg","setTempAvg","_useState9","_useState10","tempTol","setTempTol","_useState11","_useState12","humidityAvg","setHumidityAvg","_useState13","_useState14","humidityTol","setHumidityTol","_useState15","_useState16","moistureAvg","setMoistureAvg","_useState17","_useState18","moistureTol","setMoistureTol","updateDeviceMutation","oldName","oldSettings","newSettings","updateName","s","_key","parseFloat","mutate","placeholder","Gauge","measurement","val","LOGOUT","LogoutButton_templateObject","Logout","logoutUser","logout","Menu","compress","displayMenu","menu","setMenu","setModal","LogoutButton","UPDATE_USER","ModifyUser_templateObject","DELETE_USER","ModifyUser_templateObject2","ModifyUser","updateBtn","deleteBtn","deleteUser","closeModal","SelectDevice","expand","setSelected","select","mapList","el","list","DELETE_DEVICE","DeviceMenu_templateObject","ADD_DEVICE","DeviceMenu_templateObject2","selDevice","setSelDevice","inputDeviceName","setInputDeviceName","delDevice","setDelDevice","setErrorMsg","setLoading","setGQLError","addDeviceMutation","addDeviceToUser","deleteDeviceMutation","_ref5","_callee2","_ref6","_context2","_x2","DeviceDropDown","selectDevice","Modal","renderForm","Dashboard_ModifyUser","Dashboard_DeviceMenu","renderTitle","USER","Dashboard_templateObject","Dashboard","showModal","parseQuery","usr","findUser","Dashboard_Modal","Dashboard_Menu","Dashboard_Chart","Dashboard_DataTable","Dashboard_DeviceInfo","Dashboard_Gauges","App","BrowserRouter","Route","path","exact","component","requiresAuth","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","link","split","_getMainDefinition","getMainDefinition","kind","operation","ApolloClient","cache","InMemoryCache","store","createStore","reducer","composeWithDevTools","applyMiddleware","ReactDOM","render","es","Components_App","getElementById"],"mappings":"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","file":"static/js/main.fbd9d7c3.chunk.js","sourcesContent":["import * as actions from '../Actions/types'\r\n\r\nconst INITIAL_STATE = {\r\n    id: null,\r\n    email: null,\r\n}\r\n\r\n\r\nexport default (state=INITIAL_STATE, action) => {\r\n    switch(action.type){\r\n        case actions.SIGN_UP: {\r\n            const user = action.payload\r\n            return {...state, ...user}\r\n        }\r\n        case actions.LOGIN:{\r\n            const user = action.payload\r\n            return {...state, ...user}\r\n        }\r\n        case actions.UPDATE_USER:{\r\n            const user = action.payload\r\n            return {...state,...user}\r\n        }\r\n        case actions.LOGOUT:{\r\n            return INITIAL_STATE\r\n        }\r\n        default: return state\r\n    }\r\n}","import * as actions from '../Actions/types'\r\n\r\nconst INITIAL_STATE = {\r\n    selectedDevice: {},\r\n    devices: {}\r\n }\r\n\r\n //figure \r\n\r\n\r\nexport default (state=INITIAL_STATE, action) => {\r\n    switch(action.type){\r\n        case actions.ADD_DEVICE: {\r\n            //receives a device object\r\n            const device = action.payload\r\n            const deviceName = device.dev_name\r\n            let devices = {...state.devices}\r\n            devices[deviceName] = device\r\n            return {...state, devices}\r\n        }\r\n        case actions.UPDATE_DEVICE: {\r\n            //receives a device object \r\n            let obj = state.devices\r\n            const device = action.payload\r\n            let devices = Object.keys(obj).map( key=> obj[key] === device.dev_name ? device : obj[key] )\r\n            return {...state, devices}\r\n        }\r\n        case actions.UPDATE_DEVICES: {\r\n            //receives an array of devices. records attached\r\n            let devArry = action.payload\r\n            let obj = state.devices\r\n            devArry.forEach(device => {\r\n                obj[device.dev_name] = device\r\n            });\r\n            let dev = state.selectedDevice\r\n            //check to see if there is a selected device\r\n            if(Object.keys(dev).length === 0){\r\n                 dev = devArry[0]\r\n            }\r\n            return {selectedDevice: dev, devices: obj}\r\n        }\r\n        case actions.DELETE_DEVICE: {\r\n            //receives a device name and removes it from the object\r\n            const deviceName = action.payload\r\n            let devices = state.devices;\r\n            delete devices[deviceName]\r\n            \r\n            return {...state, devices}\r\n        }\r\n        case actions.SET_SELECTED_DEVICE:{\r\n            const deviceName = action.payload\r\n            const device = state.devices[deviceName]\r\n            let selectedDevice = {}\r\n            selectedDevice = {id: device.id, settings:device.settings, dev_name: device.dev_name}\r\n            return {selectedDevice, devices: {...state.devices}}\r\n        }\r\n        case actions.LOGOUT:{\r\n            return INITIAL_STATE\r\n        }\r\n        default: return state\r\n    }\r\n}","import * as actions from '../Actions/types'\r\nimport moment from 'moment'\r\n\r\n\r\n//Records will come in as an array of Record\r\n//Records stored will only be for the selected device\r\n//individual record will = {date: DD/MM//YYYY, data: [ {time, light, temp, humidity, moisture} ] }\r\n//state will have a key with date and a value of data\r\n\r\n//selected is the day selected\r\n//all is the complete list of record dates for the device\r\n\r\nconst INITIAL_STATE = {\r\n    selected: {},\r\n    all: {},\r\n    today: []\r\n}\r\n\r\nexport default (state=INITIAL_STATE, action) => {\r\n    switch(action.type){\r\n        case actions.UPDATE_RECORD:{\r\n\r\n                let record = action.payload\r\n                let newSet = state.today\r\n                newSet.push(record)\r\n            return {...state, today:newSet};\r\n        }\r\n        case actions.SET_DEVICE_RECORDS:{\r\n            //reset all records set selected to the first date\r\n            let records = action.payload\r\n            //set selected and today to last record in list\r\n            if(records.length > 0){\r\n                let latest = records[records.length-1]\r\n                let selected = latest\r\n                let td = moment().format('MM/DD/YYYY')\r\n                let today = []\r\n             \r\n                if(latest.date === td){ today = latest.data }\r\n    \r\n                let all = {}\r\n    \r\n                records.forEach(record => {\r\n                    all[record.date] = record\r\n                })\r\n    \r\n                return {selected, all, today};\r\n            }else{\r\n                return INITIAL_STATE\r\n            }\r\n\r\n        }\r\n        case actions.SET_SELECTED_RECORD:{\r\n            const record = action.payload\r\n            return {...state, selected: record}\r\n        }\r\n        case actions.LOGOUT:{\r\n            return INITIAL_STATE\r\n        }\r\n        default: return state\r\n    }\r\n}","import { combineReducers } from 'redux'\r\nimport User from './User'\r\nimport Device from './Device'\r\nimport Record from './Record'\r\n\r\nexport default combineReducers({\r\n    user: User,\r\n    device: Device,\r\n    records: Record,\r\n})","export const LOGIN = \"login\"\r\nexport const SIGN_UP = \"signUp\"\r\nexport const LOGOUT = \"logOut\"\r\n\r\nexport const ADD_DEVICE = \"add_device\"\r\nexport const DELETE_DEVICE = \"delete_device\"\r\nexport const UPDATE_DEVICE = \"update_device\"\r\nexport const UPDATE_DEVICES = \"update_devices\"\r\nexport const SET_SELECTED_DEVICE = \"set_selected_device\"\r\n\r\nexport const UPDATE_USER = \"update_user\"\r\nexport const DELETE_USER = \"delete_user\"\r\n\r\n//triggered when subscription is fired \r\nexport const UPDATE_RECORD = \"update_records\"\r\n//triggered when a new device is selected\r\nexport const SET_DEVICE_RECORDS = \"getDeviceRecords\"\r\n//triggered when a new record date is selected\r\nexport const SET_SELECTED_RECORD = \"setSelectedRecord\"","import React, { Component } from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\nimport Cookies from 'js-cookie'\r\n\r\n\r\nexport default (WrappedComponent)=>{\r\n    class RequiresAuth extends Component{\r\n\r\n        componentDidMount(){\r\n            if(!Cookies.get('xAuthG')){\r\n                this.props.history.push('/')\r\n            }\r\n        }\r\n\r\n\r\n        componentWillUpdate(nextProps){\r\n            if(!Cookies.get('xAuthG')){\r\n                console.log(nextProps)\r\n                this.props.history.push('/')\r\n            }\r\n        }\r\n\r\n\r\n        render(){\r\n            return <WrappedComponent {...this.props}/>\r\n        }\r\n    }\r\n    return withRouter(RequiresAuth)\r\n}\r\n\r\n//turn this into a query component for the user","import React from 'react'\r\n\r\nexport default () => <div className=\"spinner\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n","import * as action from './types'\r\n\r\n//User\r\n\r\nexport const updateUser = (user) => {\r\n    return {\r\n        type: action.UPDATE_USER,\r\n        payload: user\r\n    }\r\n}","import * as actions from './types'\r\n\r\nexport const login = (user) => {\r\n    return {\r\n        type: actions.LOGIN,\r\n        payload: user\r\n    }\r\n}\r\n\r\nexport const signUp = (user) => {\r\n    return {\r\n        type: actions.SIGN_UP,\r\n        payload: user\r\n    }\r\n}\r\n\r\nexport const logOut = () =>{\r\n    return { type: actions.LOGOUT }\r\n}","import * as actions from './types'\r\n\r\n//Device\r\n\r\nexport const addDevice = (device) => {\r\n    return {\r\n        type: actions.ADD_DEVICE,\r\n        payload: device\r\n    }\r\n}\r\n\r\nexport const updateDevice = (device) => {\r\n    return {\r\n        type: actions.UPDATE_DEVICE,\r\n        payload: device\r\n    }\r\n}\r\n\r\nexport const updateDevices = (devices) => {\r\n    return {\r\n        type: actions.UPDATE_DEVICES,\r\n        payload: devices\r\n    }\r\n}\r\n\r\nexport const deleteDevice = (deviceName) =>{\r\n    return {\r\n        type: actions.DELETE_DEVICE,\r\n        payload: deviceName\r\n    }\r\n}\r\n\r\nexport const setSelectedDevice = (deviceName) => {\r\n    return {\r\n        type: actions.SET_SELECTED_DEVICE,\r\n        payload: deviceName\r\n    }\r\n}","import * as actions from './types'\r\n\r\n//update an individual record\r\nexport const updateRecord = (data) => {\r\n    return{\r\n        type: actions.UPDATE_RECORD,\r\n        payload: data\r\n    }\r\n}\r\n//set device records\r\nexport const setDeviceRecords = (records) => {\r\n    return {\r\n        type: actions.SET_DEVICE_RECORDS,\r\n        payload: records\r\n    }\r\n}\r\nexport const setSelectedRecord = (record) => {\r\n    return{\r\n        type: actions.SET_SELECTED_RECORD,\r\n        payload: record\r\n    }\r\n}\r\n\r\n","import * as User from './user'\r\nimport * as Auth from './auth'\r\nimport * as Device from './device'\r\nimport * as Records from './records'\r\n\r\nexport default  {\r\n                ...User,\r\n                ...Auth,\r\n                ...Device,\r\n                ...Records\r\n            }","import React, { Component } from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nimport gql from \"graphql-tag\"\r\nimport { Mutation } from \"react-apollo\"\r\nimport { connect } from 'react-redux'\r\nimport Cookies from 'js-cookie'\r\nimport Spinner from '../General/Spinner'\r\n\r\nimport actions from \"../../Actions\"\r\n\r\nconst CREATE_USER = gql`\r\n  mutation createUser($data: CreateUserInput!) {\r\n    createUser(data: $data) {\r\n      id\r\n      email\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\n\r\n class SignUp extends Component {\r\n\r\n  state = {\r\n    email: \"\",\r\n    password: \"\",\r\n    loading: false,\r\n    errorMsg: null\r\n  }\r\n\r\n\r\n    handleClick = (createUser)=>{\r\n      const{email, password, loading} = this.state\r\n      \r\n      //check to see if the inputs exist\r\n      if(email!==\"\" && password!==\"\" && !loading){\r\n        this.setState({loading: true})\r\n\r\n        createUser({ variables: { \r\n          data: {\r\n              email: this.state.email,\r\n              password: this.state.password\r\n            } \r\n          } \r\n        })\r\n      \r\n      }else{\r\n        this.setState({errorMsg: \"please check inputs\"})\r\n      }\r\n    }\r\n\r\n\r\n    loadingBtn = ({createUser}) =>{\r\n      if(this.state.loading){\r\n        return( <Spinner /> )\r\n      }else{\r\n        return (\r\n          <div>\r\n            <button className=\"btn_primary\" \r\n              onClick={ ()=>{ this.handleClick(createUser) }} >\r\n              <span className=\"btn_primary-center\">Submit</span>\r\n            </button>\r\n            <p className=\"error\">{this.state.errorMsg}</p>\r\n          </div>\r\n        )\r\n      }\r\n    }\r\n\r\n    setError = (error) => {\r\n      const msg = error.message.slice(error.message.indexOf(\":\")+2)\r\n      Cookies.remove(\"xAuthG\")\r\n      this.setState({errorMsg: msg, loading: false, email: \"\", password: \"\"})\r\n    }\r\n\r\n    \r\n    render(){\r\n      \r\n        return (\r\n          <div className=\"landing_center\">\r\n\r\n          <h1 className=\"center_header H_primary\">Grow Control</h1>\r\n                  <div id=\"login\" className=\"authForm card\">\r\n                      <span \r\n                          className=\"authForm_close form_close\"\r\n                          onClick={()=>{this.props.setDisplay()}}\r\n                      >X</span>\r\n                      <h2 className=\"authForm_header H_secondary\">Sign Up</h2>\r\n                      \r\n                      <input\r\n                          type=\"email\"\r\n                          value={this.state.email}\r\n                          onChange={(event)=>{this.setState({email: event.target.value})}}\r\n                      ></input>\r\n                      <label>Email</label>\r\n                      \r\n                      <input\r\n                          type=\"password\"\r\n                          value={this.state.password}\r\n                          onChange={(event)=>{this.setState({password: event.target.value})}}\r\n                      ></input>\r\n                      <label>Password</label>\r\n                      \r\n                      <Mutation \r\n                      mutation={CREATE_USER}\r\n                      onError={(error)=>{\r\n                        this.setError(error)\r\n                      }}\r\n                      onCompleted={(data)=>{\r\n                        //if authenticated\r\n                        if(data.createUser.token){\r\n                          const token = data.createUser.token\r\n                          Cookies.set(\"xAuthG\", token)\r\n                          this.props.signUp(data.createUser)\r\n                          this.props.history.push('/dashboard')\r\n                        }else{\r\n                          //set error message\r\n                          this.setState({loading: false,})\r\n                        }\r\n\r\n                      }} \r\n                      >\r\n                      {(createUser, { data }) => {  \r\n                        \r\n                          return (\r\n                          <div>\r\n                            { this.loadingBtn({createUser}) }\r\n                          </div>\r\n                        )}\r\n                        \r\n                        }\r\n                      </Mutation> \r\n              </div>\r\n          </div>\r\n    );\r\n  }\r\n\r\n};\r\n\r\n\r\nexport default connect(null,  actions )(withRouter(SignUp))","\r\nimport React, { Component } from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nimport gql from \"graphql-tag\"\r\nimport { Mutation } from \"react-apollo\"\r\nimport { connect } from 'react-redux'\r\nimport Cookies from 'js-cookie'\r\nimport Spinner from '../General/Spinner'\r\n\r\nimport actions from \"../../Actions\"\r\n\r\nconst LOGIN_USER = gql`\r\n  mutation loginUser($data: LoginUserInput!) {\r\n    loginUser(data: $data) {\r\n      id\r\n      email\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\n class Login extends Component {\r\n\r\n  state = {\r\n    email: \"\",\r\n    password: \"\",\r\n    loading: false,\r\n    errorMsg: null\r\n  }\r\n\r\n\r\n    handleClick = (loginUser)=>{\r\n      const{email, password, loading} = this.state\r\n      \r\n      //check to see if the inputs exist\r\n      if(email!==\"\" && password!==\"\" && !loading){\r\n        this.setState({loading: true})\r\n\r\n        loginUser({ variables: { \r\n          data: {\r\n              email: this.state.email,\r\n              password: this.state.password\r\n            } \r\n          } \r\n        })\r\n      \r\n      }else{\r\n        this.setState({errorMsg: \"please check inputs\"})\r\n      }\r\n    }\r\n\r\n\r\n    loadingBtn = ({loginUser}) =>{\r\n      if(this.state.loading){\r\n        return( <Spinner /> )\r\n      }else{\r\n        return (\r\n          <div>\r\n            <button className=\"btn_primary\" \r\n              onClick={ ()=>{ this.handleClick(loginUser) }} >\r\n              <span className=\"btn_primary-center\">Submit</span>\r\n            </button>\r\n            <p className=\"error\">{this.state.errorMsg}</p>\r\n          </div>\r\n        )\r\n      }\r\n    }\r\n\r\n    setError = (error) => {\r\n      const msg = error.message.slice(error.message.indexOf(\":\")+2)\r\n      Cookies.remove(\"xAuthG\")\r\n      this.setState({errorMsg: msg, loading: false, email: \"\", password: \"\"})\r\n    }\r\n\r\n    \r\n    render(){\r\n      \r\n        return (\r\n          <div className=\"landing_center\">\r\n\r\n          <h1 className=\"center_header H_primary\">Grow Control</h1>\r\n                  <div id=\"login\" className=\"authForm card\">\r\n                      <span \r\n                          className=\"authForm_close form_close\"\r\n                          onClick={()=>{this.props.setDisplay()}}\r\n                      >X</span>\r\n                      <h2 className=\"authForm_header H_secondary\">Login</h2>\r\n                      \r\n                      <input\r\n                          id=\"email\"\r\n                          name=\"email\"\r\n                          className=\"form_input\"\r\n                          type=\"email\"\r\n                          value={this.state.email}\r\n                          onChange={(event)=>{this.setState({email: event.target.value})}}\r\n                      ></input>\r\n                      <label type=\"form_label\" htmlFor=\"email\">Email</label>\r\n                      \r\n                      <input\r\n                          id=\"password\"\r\n                          name=\"password\"\r\n                          className=\"form_input\"\r\n                          type=\"password\"\r\n                          value={this.state.password}\r\n                          onChange={(event)=>{this.setState({password: event.target.value})}}\r\n                      ></input>\r\n                      <label type=\"form_label\" htmlFor=\"password\">Password</label>\r\n                      \r\n                      <Mutation \r\n                      mutation={LOGIN_USER}\r\n                      onError={(error)=>{\r\n                        this.setError(error)\r\n                      }}\r\n                      onCompleted={(data)=>{\r\n                        //if authenticated\r\n                        if(data.loginUser.token){\r\n                          const token = data.loginUser.token\r\n                          Cookies.set(\"xAuthG\", token)\r\n                          this.props.login(data.loginUser)\r\n                          this.props.history.push('/dashboard')\r\n                          this.setState({loading: false,})\r\n                        }else{\r\n                          //set error message\r\n                          this.setState({loading: false,})\r\n                        }\r\n\r\n                      }} \r\n                      >\r\n                      {(loginUser, { data }) => {  \r\n                        \r\n                          return (\r\n                          <div>\r\n                            { this.loadingBtn({loginUser}) }\r\n                          </div>\r\n                        )}\r\n                        \r\n                        }\r\n                      </Mutation> \r\n              </div>\r\n          </div>\r\n    );\r\n  }\r\n\r\n};\r\n\r\n\r\nexport default connect(null,  actions )(withRouter(Login))","import React, {Component} from 'react'\r\n\r\nimport SignUp from './SignUp'\r\nimport Login from './Login'\r\nimport Cookies from 'js-cookie'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\n\r\nclass Landing extends Component{\r\n\r\n    state={\r\n        display: \"landing\"\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(Cookies.get('xAuthG')){\r\n            this.props.history.push('/Dashboard')\r\n        }\r\n    }\r\n\r\n\r\n\r\n    landing = () => (\r\n\r\n        <div className=\"landing_center\">\r\n                <h1 className=\"center_header H_primary\">Grow Control</h1>\r\n\r\n            <div className=\"center_logo\">\r\n                <div className=\" mushroom_landing_center mushroom\"></div>\r\n            </div>\r\n            \r\n            <button \r\n            onClick={()=>this.setState({display: \"signUp\"})}    \r\n            className=\"center_signUp btn_primary\"    \r\n            ><span className=\"btn_primary btn_primary-center\">Sign-Up</span></button> \r\n            \r\n            <button \r\n            onClick={()=>this.setState({display: \"login\"})}    \r\n            className=\"center_login btn_primary\"\r\n            ><span className=\"btn_primary btn_primary-center\">Login</span></button>\r\n        </div>\r\n\r\n    )\r\n\r\n    setDisplay = () => {\r\n        this.setState({display: \"landing\"})\r\n    }\r\n\r\n    renderCenter = () => {\r\n        const display = this.state.display;\r\n        switch(display){\r\n            case \"login\": {\r\n                return  <Login setDisplay={this.setDisplay}/>;\r\n            }\r\n\r\n            case \"signUp\": {\r\n                return <SignUp setDisplay={this.setDisplay}/>;\r\n            }\r\n            default: {\r\n                return this.landing();\r\n            }\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"landing\">\r\n                {this.renderCenter()}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default withRouter(Landing)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport {AreaChart, Area, XAxis, YAxis, Tooltip} from 'recharts'\r\n\r\n\r\n\r\n\r\nclass Graph extends Component {\r\n  state = {\r\n    width: null,\r\n    height: null,\r\n  }\r\n\r\n  saveRef = (ref) => this.containerNode = ref\r\n\r\n  measure() {\r\n    const {clientWidth, clientHeight} = this.containerNode\r\n\r\n    this.setState({\r\n      width: clientWidth,\r\n      height: clientHeight,\r\n    })\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.measure()\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.measure()\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return (\r\n      this.state.width !== nextState.width ||\r\n      this.state.height !== nextState.height ||\r\n      this.props.record.data !== nextProps.record.data ||\r\n      this.props.dataType !== nextProps.dataType ||\r\n      this.props.data !== nextProps.data\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const {width, height} = this.state\r\n    let data\r\n    let d = this.props.record.data\r\n    if(d){\r\n      data = [...d]\r\n    }\r\n    return (\r\n        <div\r\n          className=\"graph\"\r\n          ref={this.saveRef}\r\n        >\r\n          <AreaChart width={width} height={height} data={data}\r\n              margin={{top: 10, right: 30, left: 0, bottom: 0}}>\r\n            <XAxis\r\n              dataKey='time' \r\n              stroke=\"#00a8f7\"\r\n              ticks={[1]} \r\n              />\r\n            <YAxis stroke=\"#00a8f7\" tickSize={15}/>\r\n            <Tooltip/>\r\n            <Area type='monotone' dataKey={this.props.dataType} stroke='#00a8f7' fill='#1f1e1e' />\r\n          </AreaChart>\r\n        </div>\r\n\r\n    )\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  let data = state.records.today\r\n  return {\r\n    record: state.records.selected,\r\n    data: data[data.length - 1]\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(Graph)","import React, { useEffect, useState } from 'react'\r\nimport actions from '../../Actions';\r\n\r\nimport gql from \"graphql-tag\";\r\nimport {  ApolloConsumer } from \"react-apollo\";\r\nimport Cookies from 'js-cookie';\r\n\r\nimport { connect } from 'react-redux'\r\n\r\n\r\n//this query loads the user devices\r\nconst RECORD_ONE_DAY = gql`\r\nquery recordOneDay($data:RecordOneDayInput){\r\n    recordOneDay(data: $data){\r\n        date\r\n        data{\r\n            time\r\n            light\r\n            temp\r\n            humidity\r\n            moisture\r\n        }\r\n    }\r\n}`\r\n\r\n\r\n\r\n\r\n\r\nconst DateButton  = (props) => {\r\n\r\n\r\n    const [expanded, setExpanded] = useState(null)\r\n    const [token, setToken] = useState(null)\r\n\r\n    const {records, selected} = props\r\n\r\n\r\n    useEffect(()=>{\r\n        setToken(Cookies.get('xAuthG'))\r\n    },[expanded, records, token])\r\n\r\n    const expand=()=>{\r\n        expanded ? setExpanded(null) : setExpanded('expanded')\r\n    }\r\n\r\n    const oneDayQuery = async ({token, deviceId, date, client}) => {\r\n        const { data } = await client.query({\r\n          query:RECORD_ONE_DAY,\r\n          variables:{data: {deviceId ,token, date}}\r\n        });\r\n        const { recordOneDay } = data\r\n        props.setSelectedRecord(recordOneDay)\r\n      }\r\n\r\n    const liClick=({e, client})=>{\r\n        oneDayQuery({token, deviceId: props.deviceId, date: e.target.id ,client})\r\n    }\r\n\r\n    const renderRecords = () => {\r\n        const recordsArray = Object.keys(records).map(key=>records[key])\r\n        return recordsArray.map((record,i)=>\r\n        <ApolloConsumer key={record.date}>\r\n            {client => (\r\n                <li id={record.date} onClick={ (e)=>{ liClick( {e ,client} )} } className=\"dateBtn_item\" >{record.date}</li>\r\n                )}\r\n        </ApolloConsumer>\r\n        )}\r\n\r\n    const renderCenter = () => {\r\n        return !expanded ? (<div className=\"dateBtn_center\" >{selected.date}<i className=\"fas fa-chevron-up\"></i></div>) :\r\n                            (<div className={`dateBtn_center ${expanded}`}><ul>{renderRecords()}</ul></div>)\r\n    }\r\n        \r\n    return( <button onClick={ ()=>{expand()} } className=\"dateBtn\">{ renderCenter() }</button> )\r\n\r\n}//dend of date button \r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        deviceId: state.device.selectedDevice.id,\r\n        records: state.records.all,\r\n        selected: state.records.selected\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, actions)(DateButton)\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport Graph from './Graph'\r\nimport { connect } from 'react-redux'\r\nimport DateButton from './DateButton'\r\n\r\n\r\nconst Chart = (props) =>  {\r\n\r\n  const [dataType, setDataType] = useState('light')\r\n\r\n    useEffect(()=>{\r\n\r\n    },[dataType, props.date])\r\n\r\n\r\n  const renderButtons = () => {\r\n    const buttons = [\"Light\", \"Temp\", \"Humidity\", \"Moisture\"]\r\n    \r\n    return buttons.map((label)=>{\r\n\r\n      const buttonClass = dataType === label.toLowerCase() ? \r\n            \"btn_secondary btn_secondary_selected\":\r\n            \"btn_secondary\";\r\n      return (\r\n      <button\r\n        key={label} \r\n        onClick={(e)=>{setDataType(e.currentTarget.id.toLowerCase())}}\r\n        id={label}\r\n        className={buttonClass}\r\n        >\r\n        <span className=\"btn_secondary-center\">\r\n          {label}\r\n        </span>\r\n      </button>\r\n      )\r\n    })\r\n  }\r\n\r\n\r\n    return (\r\n      <div className=\"chart card\">\r\n          <h2 className=\"H_secondary-white\">{`Data for: ${props.date}`}</h2>\r\n        <Graph dataType={dataType}/>\r\n        <div className=\"chart_controls\">\r\n        <DateButton />\r\n        {renderButtons()}\r\n        </div>\r\n      </div>\r\n    )\r\n  \r\n\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  return {\r\n    date: state.records.selected.date, \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(Chart)","import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport gql from \"graphql-tag\";\r\nimport Cookies from 'js-cookie';\r\nimport moment from 'moment'\r\nimport actions from '../../Actions';\r\n\r\nimport { Query } from \"react-apollo\";\r\n//This component shows the last 10 readings\r\n//live data stream\r\n\r\n//this query loads the user devices\r\nconst RECORD_ONE_DAY = gql`\r\nquery recordOneDay($data:RecordOneDayInput){\r\n    recordOneDay(data: $data){\r\n        date\r\n        data{\r\n            time\r\n            light\r\n            temp\r\n            humidity\r\n            moisture\r\n        }\r\n    }\r\n}`\r\n\r\n\r\n\r\nconst DATA_SUBSCRIPTION = gql`\r\nsubscription DataSubscription($data: DataSubscriptionInput){\r\n    data(data: $data){\r\n      time\r\n      light\r\n      temp\r\n      humidity\r\n      moisture\r\n    }\r\n  }\r\n`;\r\n\r\n\r\n const NewTableBody = (props) => {\r\n\r\n    if(props.deviceId && props.userId){\r\n\r\n        const deviceId = props.deviceId\r\n        const userId = props.userId\r\n        const token = Cookies.get('xAuthG')\r\n        const date = moment().format('MM/DD/YYYY')\r\n    \r\n        return (\r\n            <Query\r\n                query={RECORD_ONE_DAY}\r\n                variables={{data:{ deviceId, token, date }}}\r\n            >\r\n                {({ loading, error, data , subscribeToMore }) => { \r\n                    if(data){\r\n                        if(Object.keys(data).length > 0 && data.recordOneDay !== null){\r\n                            const {recordOneDay} = data\r\n                            \r\n                            return ( \r\n                                <RenderBody\r\n                                    props={props} \r\n                                    data={recordOneDay.data} \r\n                                    subscribeToNewData = {()=>\r\n                                        subscribeToMore({\r\n                                            document: DATA_SUBSCRIPTION,\r\n                                            variables: {data: {deviceId, token, userId}},\r\n                                            updateQuery: (prev,  { subscriptionData }  )=>{\r\n                                                if (!subscriptionData.data) return prev;\r\n                                                    if(prev.recordOneDay !== null){\r\n                                                        const { data } = subscriptionData.data\r\n                                                            //check to see if the data has the last timestamp\r\n                                                          let dataArray = prev.recordOneDay.data  \r\n                                                            if(dataArray[dataArray.length-1].time !== data.time){\r\n                                                                prev.recordOneDay.data.push(data)\r\n                                                                props.updateRecord(data)\r\n                                                            }\r\n                                                    }\r\n                                                return prev\r\n                                                \r\n                                            }\r\n                                        })\r\n                                    }\r\n                                /> \r\n                            )\r\n                        }\r\n                        return (<h2>...None</h2>)\r\n                    }\r\n                }}\r\n            </Query>)\r\n    }else{\r\n        return (<div>\r\n            <br></br>\r\n            <h2>Nothing Yet...</h2>\r\n            <br></br>\r\n            <h2>If a new device has been added,</h2>\r\n            <h2>please refresh the page once the id has been</h2>\r\n            <h2>updated on the physical device.</h2>\r\n            </div>)\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nconst RenderBody = (props) => {\r\nconst data = props.data    \r\n\r\nuseEffect(()=>{\r\n    props.subscribeToNewData()  \r\n},[])\r\n\r\n    let reversedData = []\r\n\r\n    if(!data){\r\n        return <h2 className=\"P\">Not Active...</h2>\r\n    }\r\n    \r\n    for (let i=data.length -1; i >= 0; i--) {\r\n        reversedData.push(data[i])\r\n    }\r\n    \r\n    return reversedData.map( measurment => {\r\n        const {time, light, temp, humidity, moisture} = measurment\r\n        return (\r\n            <div \r\n            key={measurment.time}\r\n            className=\"data dataTable_body_data\">\r\n                <span className=\"data dataTable_body-time\">{time}</span>\r\n                <span className=\"data dataTable_body-light\">{light}</span>\r\n                <span className=\"data dataTable_body-temp\">{temp}</span>\r\n                <span className=\"data dataTable_body-humidity\">{humidity}</span>\r\n                <span className=\"data dataTable_body-moisture\">{moisture}</span>\r\n            </div>\r\n        )\r\n    })\r\n}\r\n\r\nconst DataTable = (props) => {\r\n\r\n\r\n    return (\r\n        <div className=\"dataTable card\">\r\n            <div className=\"dataTable_spacer\"></div>\r\n            <div className=\"dataTable_header H_secondary\">Current Data</div>\r\n            <div className=\"dataTable_body\">\r\n                <div className=\"dataTable_body_label\">\r\n                    <span className=\"H_tertiary\">Time</span>\r\n                    <span className=\"H_tertiary\">Light</span>\r\n                    <span className=\"H_tertiary\">Temp</span>\r\n                    <span className=\"H_tertiary\">Humidity</span>\r\n                    <span className=\"H_tertiary\">Moisture</span>\r\n                </div>\r\n                {/* Render body goes here */}\r\n                { NewTableBody(props) }\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        deviceId: state.device.selectedDevice.id,\r\n        userId: state.user.id\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,actions)(DataTable)\r\n\r\n\r\n","import React, {useState} from 'react'\r\nimport gql from \"graphql-tag\";\r\nimport {  ApolloConsumer } from \"react-apollo\";\r\nimport { connect } from 'react-redux'\r\nimport Cookies from 'js-cookie';\r\n\r\n//This component displays the current device info\r\n\r\n\r\nconst UPDATE_DEVICE = gql`\r\nmutation updateDevice($data: UpdateDeviceInput!) {\r\n    updateDevice(data: $data) {\r\n        id\r\n      dev_name\r\n      settings{\r\n        light {average tol}\r\n        temp {average tol}\r\n        humidity {average tol}\r\n        moisture {average tol}\r\n      }  \r\n      records{\r\n        date\r\n        data{\r\n          time\r\n          light\r\n          temp\r\n          humidity\r\n          moisture\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\n\r\nconst DeviceInfo = (props) =>  {\r\n\r\n    let settings = props.device.settings || { light: {average: 0, tol: 0}, \r\n                        temp: {average: 0, tol: 0}, \r\n                        humidity: {average: 0, tol: 0}, \r\n                        moisture: {average: 0, tol: 0}\r\n                    }\r\n\r\n\r\n    let name = props.device.dev_name || \"Loading...\"\r\n\r\n    for (let key in settings){\r\n        let {average, tol} = settings[key]\r\n        settings[key] = {average, tol}\r\n    }\r\n    delete settings.__typename\r\n\r\n  \r\n    const {light, temp, humidity, moisture} = settings\r\n    \r\n    const [newName, setNewName] = useState('')\r\n    const [lightAvg, setLightAvg] = useState('')\r\n    const [lightTol, setLightTol] = useState('')\r\n    const [tempAvg, setTempAvg] = useState('')\r\n    const [tempTol, setTempTol] = useState('')\r\n    const [humidityAvg, setHumidityAvg] = useState('')\r\n    const [humidityTol, setHumidityTol] = useState('')\r\n    const [moistureAvg, setMoistureAvg] = useState('')\r\n    const [moistureTol, setMoistureTol] = useState('')\r\n\r\n    const updateDeviceMutation = async ({ deviceId, name, oldName, oldSettings, newSettings ,client}) => {\r\n        let token = await Cookies.get('xAuthG')\r\n        const updateName = name === '' ? oldName : name;\r\n        let s = oldSettings\r\n        for(let key in newSettings){\r\n            if(newSettings[key].average !== \"\"){\r\n                s[key].average = parseFloat(newSettings[key].average)\r\n            }\r\n            if(newSettings[key].tol !== \"\"){\r\n                s[key].tol = parseFloat(newSettings[key].tol)\r\n            }\r\n        }  \r\n        const { data } = await client.mutate({\r\n          mutation:UPDATE_DEVICE,\r\n          variables:{data: {deviceId ,token, name:updateName, settings:s }}\r\n        });\r\n        \r\n    //reset all inputs\r\n\r\n        setNewName('')\r\n        setLightAvg('')\r\n        setLightTol('')\r\n        setTempAvg('')\r\n        setTempTol('')\r\n        setHumidityAvg('')\r\n        setHumidityTol('')\r\n        setMoistureAvg('')\r\n        setMoistureTol('')\r\n        \r\n      }\r\n  \r\n        return (\r\n            <div className=\"deviceInfo card\">\r\n                <h2 className=\"H_secondary H_secondary-sub\">Update Device</h2>\r\n\r\n                <span className=\"dev_info_header dev_info_header-light\">light</span>\r\n                <span className=\"dev_info_header dev_info_header-temp\">temp</span>\r\n                <span className=\"dev_info_header dev_info_header-humidity\">humidity</span>\r\n                <span className=\"dev_info_header dev_info_header-moisture\">moisture</span>\r\n\r\n                <span className=\"dev_info_label dev_info_label-average\">Avg</span>\r\n                <span className=\"dev_info_label dev_info_label-tolerance\">Tol</span>\r\n\r\n                <input \r\n                    className=\"P dev_info dev_info_name\"\r\n                    placeholder={`Device Name: ${name}`} \r\n                    value = {newName}\r\n                    onChange = {(e)=>{setNewName(e.target.value)}}\r\n                />\r\n\r\n                <input \r\n                    placeholder={light.average} \r\n                    className=\"P dev_info-avg dev_info-avg-light\"\r\n                    value = {lightAvg}\r\n                    onChange = {(e)=>{setLightAvg(e.target.value)}} \r\n                />\r\n                <input \r\n                    placeholder={`+/- ${light.tol}`} \r\n                    className=\"P dev_info-tol dev_info-tol-light\" \r\n                    value = {lightTol}\r\n                    onChange = {(e)=>{setLightTol(e.target.value)}} \r\n                />\r\n\r\n                <input \r\n                    placeholder={temp.average} \r\n                    className=\"P dev_info-avg dev_info-avg-temp\"\r\n                    value = {tempAvg}\r\n                    onChange = {(e)=>{setTempAvg(e.target.value)}}  \r\n                />\r\n                <input \r\n                    placeholder={`+/- ${temp.tol}`} \r\n                    className=\"P dev_info-tol dev_info-tol-temp\"\r\n                    value = {tempTol}\r\n                    onChange = {(e)=>{setTempTol(e.target.value)}}  \r\n                />\r\n\r\n                <input \r\n                    placeholder={humidity.average} \r\n                    className=\"P dev_info-avg dev_info-avg-humidity\"\r\n                    value = {humidityAvg}\r\n                    onChange = {(e)=>{setHumidityAvg(e.target.value)}}  \r\n                />\r\n                <input \r\n                    placeholder={`+/- ${humidity.tol}%`} \r\n                    className=\"P dev_info-tol dev_info-tol-humidity\"\r\n                    value = {humidityTol}\r\n                    onChange = {(e)=>{setHumidityTol(e.target.value)}}  \r\n                />\r\n\r\n                <input \r\n                    placeholder={moisture.average} \r\n                    className=\"P dev_info-avg dev_info-avg-moisture\"\r\n                    value = {moistureAvg}\r\n                    onChange = {(e)=>{setMoistureAvg(e.target.value)}}  \r\n                />\r\n                <input \r\n                    placeholder={`+/- ${moisture.tol}%`} \r\n                    className=\"P dev_info-tol dev_info-tol-moisture\"\r\n                    value = {moistureTol}\r\n                    onChange = {(e)=>{setMoistureTol(e.target.value)}}  \r\n                />\r\n                \r\n                <ApolloConsumer >\r\n                {client => (\r\n                <button \r\n                onClick = {(event)=>{ \r\n                    updateDeviceMutation( \r\n                        {   client, deviceId: props.device.id, \r\n                            oldName: props.device.dev_name, name: \r\n                            newName, \r\n                            oldSettings: settings,\r\n                            newSettings: {\r\n                                light: {average: lightAvg, tol: lightTol},\r\n                                temp: {average: tempAvg, tol: tempTol},\r\n                                humidity: {average: humidityAvg, tol: humidityTol},\r\n                                moisture: {average: moistureAvg, tol: moistureTol},\r\n                            }\r\n                        } ) \r\n                    \r\n\r\n                    }}\r\n                className=\"dev_info_btn btn_secondary\"><span className=\"btn_secondary-center\">Submit</span></button>\r\n                )}\r\n                </ApolloConsumer>\r\n            </div>\r\n        )\r\n    \r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        device: state.device.selectedDevice\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(DeviceInfo)","import React from 'react'\r\n\r\nexport default ( {measurement, val}) => (\r\n    <div>\r\n        <div  className={`card gauge ${measurement}`}>\r\n                <div className=\"gauge_data\">{val}</div>\r\n        </div>\r\n        <div className=\"gauge_label\">{measurement}</div>\r\n    </div>\r\n)","import React, {useEffect} from 'react'\r\nimport Gauge from './Gauge'\r\nimport { connect } from 'react-redux'\r\n\r\n//This component executes the mutation for updating\r\n//The device settings\r\n\r\nconst Gauges = (props) => {\r\n\r\n       let data = props.data || {light: 0, temp: 0, humidity: 0, moisture: 0}\r\n \r\nuseEffect(()=>{\r\n\r\n},[props.data])\r\n\r\n    return (\r\n        <div className=\"gauges\">\r\n            <Gauge measurement=\"light\" val={data.light}/>\r\n            <Gauge measurement=\"temp\" val={data.temp}/>\r\n            <Gauge measurement=\"humidity\" val={data.humidity}/>\r\n            <Gauge measurement=\"moisture\" val={data.moisture}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let data = state.records.today\r\n    return {\r\n        data: data[data.length - 1]\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Gauges)","import React, {Component} from 'react'\r\nimport gql from \"graphql-tag\";\r\nimport { Mutation } from \"react-apollo\";\r\nimport Cookies from 'js-cookie'\r\nimport { connect } from 'react-redux'\r\nimport actions from '../../Actions'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nconst LOGOUT = gql`\r\n  mutation logout($data: LogoutUserInput!) {\r\n    logout(data: $data) {\r\n        id\r\n    }\r\n  }\r\n`;\r\n\r\nclass Logout extends Component {\r\n\r\n\r\nlogoutUser = (logout) => {\r\n    //delete the cookie\r\n    Cookies.remove(\"xAuthG\")\r\n    //remove the user from state\r\n    this.props.logOut()\r\n    //send the logout mutation\r\n    logout({ variables: { \r\n        data: {\r\n            userId: this.props.user.id\r\n          } \r\n        } \r\n      })\r\n    //send the user back to the login page\r\n    this.props.history.push('/')\r\n }\r\n\r\nrender(){\r\n    return (\r\n        <Mutation \r\n            mutation={LOGOUT}\r\n            onError={(error)=>{}}\r\n            onCompleted={(data)=>{}} \r\n            >\r\n            {(logout, { data }) => {  \r\n            \r\n                return (\r\n                <div>\r\n                <p onClick={()=>{ this.logoutUser(logout) }}>Logout</p>\r\n                </div>\r\n            )}}\r\n            </Mutation> \r\n      );\r\n}\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    \r\n    return {\r\n        user: state.user\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, actions)(withRouter(Logout))\r\n\r\n\r\n\r\n\r\n","import React, {Component} from 'react'\r\nimport Logout from './LogoutButton'\r\n\r\n//This component executes the mutation for updating\r\n//The device settings\r\n\r\nclass Menu extends Component {\r\n\r\n    state={\r\n        expanded: null\r\n        \r\n    }\r\n\r\n  compress = (e) => {\r\n    if(!this.state.expanded){\r\n        this.setState({expanded: \"expanded\"})\r\n    }else{\r\n        this.setState({expanded: null})\r\n    }\r\n    \r\n  }\r\n\r\n  displayMenu = (menu) => {\r\n    this.props.setMenu(menu)\r\n    this.props.setModal()\r\n  }\r\n\r\n\r\n    render(){\r\n\r\n        \r\n\r\n            return (\r\n\r\n\r\n                <div onClick={this.compress} className= {`menu ${this.state.expanded}`}>\r\n                    <div className={`menu_links ${this.state.expanded}`}>\r\n                        <Logout />\r\n                        <p onClick={()=>{this.displayMenu(\"deviceMenu\")}}>Device Menu</p>\r\n                        <p onClick={()=>{this.displayMenu(\"userAccount\")}}>User Account</p>\r\n                    </div>\r\n                    <div \r\n                    className={`menu_btn ${this.state.expanded}`}\r\n                    >\r\n                        <div  className=\"menu_bar-1\"></div>\r\n                        <div  className=\"menu_bar-2\"></div>\r\n                        <div  className=\"menu_bar-3\"></div>\r\n                    </div>\r\n                </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Menu","import React, {Component} from 'react'\r\nimport gql from \"graphql-tag\"\r\nimport { Mutation } from \"react-apollo\"\r\nimport { connect } from 'react-redux'\r\nimport Cookies from 'js-cookie'\r\nimport actions from '../../Actions'\r\nimport { withRouter } from 'react-router-dom'\r\nimport Spinner from '../General/Spinner'\r\n\r\nconst UPDATE_USER = gql`\r\n  mutation updateUser($data: UpdateUserInput!) {\r\n    updateUser(data: $data) {\r\n      id\r\n      email\r\n    }\r\n  }\r\n`;\r\n\r\nconst DELETE_USER = gql`\r\n  mutation deleteUser($data: DeleteUserInput!) {\r\n    deleteUser(data: $data) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nclass ModifyUser extends Component {\r\n\r\n    state = {\r\n        email: \"\",\r\n        password: \"\",\r\n        loading: false,\r\n        errorMsg: null,\r\n      }\r\n\r\n\r\n    \r\n    updateBtn = (updateUser) =>{\r\n        if(this.state.loading){\r\n            return(<div> <Spinner /> </div>) \r\n        }else{\r\n            return (\r\n            <button className=\"btn_primary\"\r\n            onClick={ ()=>{\r\n                this.setState({loading: true})\r\n                updateUser({ variables: { \r\n                data: {\r\n                    userId: this.props.user.id,\r\n                    email: this.state.email,\r\n                    password: this.state.password,\r\n                    token: this.props.user.token\r\n                    } \r\n                } \r\n                })\r\n                \r\n            }}\r\n            \r\n            >\r\n            <span className=\"btn_primary-center\">Update</span>\r\n            </button>\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n\r\n    deleteBtn = (deleteUser) => {\r\n\r\n\r\n        if(this.state.loading){\r\n            return(<div> <Spinner /> </div>) \r\n        }else{\r\n            return (\r\n            <button className=\"btn_primary btn_primary--del\"\r\n            onClick={ ()=>{\r\n\r\n                //delete the cookie\r\n                Cookies.remove(\"xAuthG\")\r\n                //remove the user from state\r\n                this.props.logOut()\r\n                 //send the delete mutation\r\n                deleteUser({ variables: { \r\n                    data: {\r\n                        userId: this.props.user.id\r\n                    }} \r\n                })\r\n                //send the user back to the login page\r\n                this.props.history.push('/')\r\n                \r\n            }}\r\n            \r\n            >\r\n            <span className=\"btn_primary-center btn_primary-center--del\">Delete</span>\r\n            </button>\r\n            )\r\n        }\r\n\r\n     }\r\n\r\n    render(){\r\n\r\n        return(\r\n            <div className=\"modifyUser\">\r\n            \r\n                    <input\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        className=\"form_input\"\r\n                        value={this.state.email}\r\n                        onChange={(event)=>{this.setState({email: event.target.value})}}\r\n                        type=\"email\"\r\n                    ></input>\r\n                    <label type=\"authForm label form_label\" htmlFor=\"email\">Email</label>\r\n                \r\n                    <input\r\n                        id=\"password\"\r\n                        name=\"password\"\r\n                        className=\"form_input\"\r\n                        type=\"password\"\r\n                        value={this.state.password}\r\n                        onChange={(event)=>{this.setState({password: event.target.value})}}\r\n                    ></input>\r\n                    <label type=\"authForm label form_label\" htmlFor=\"password\">Password</label>\r\n\r\n\r\n                <div className=\"modifyUser_btns\">\r\n\r\n                    <Mutation \r\n                        mutation={UPDATE_USER} \r\n                        onCompleted={(data)=>{                             \r\n                            this.setState({loading: false})\r\n                            this.props.updateUser(data.updateUser)\r\n                                //close the modal\r\n                            this.props.closeModal()\r\n                        }}\r\n                        onError={()=>{\r\n                        }}\r\n                    >\r\n                    {(updateUser, { data }) => (\r\n                        <div>\r\n                        { this.updateBtn(updateUser) }\r\n                        </div>\r\n                    )}\r\n                    </Mutation> \r\n                        \r\n                    <Mutation mutation={DELETE_USER} >\r\n                        {(deleteUser, { data }) => (\r\n                            <div>\r\n                            { this.deleteBtn(deleteUser) }\r\n                            </div>\r\n                        )}\r\n                    </Mutation> \r\n                </div>\r\n                <p className=\"error\">{this.state.errorMsg}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        user: state.user \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, actions)(withRouter(ModifyUser))\r\n","import React, {Component} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport actions from '../../Actions'\r\n\r\n\r\nclass SelectDevice extends Component {\r\n\r\n    state={\r\n        expanded: null,\r\n        selected: \"Select A Device\"\r\n    }\r\n    componentDidMount(){\r\n      \r\n    }\r\n\r\n    expand=()=>{\r\n        const expanded = this.state.expanded;\r\n        expanded ? this.setState({expanded: null}) :\r\n        this.setState({expanded: \"expanded\"})\r\n    }\r\n\r\n    setSelected = (selected) => {\r\n        this.setState({selected})\r\n        this.props.select(selected)\r\n    }\r\n\r\n    liClick=(e)=>{\r\n        this.setSelected(e.target.id);\r\n    }\r\n\r\n    mapList = () => {\r\n        const devices = this.props.device.devices\r\n        const deviceNames = Object.keys(devices)\r\n        return deviceNames.map((el)=>{\r\n            return (<li id={el} onClick={(e)=>{this.liClick(e)}} className=\"selectDevice_item\" key={el}>{el}</li>)\r\n        })\r\n    }\r\n\r\n    renderCenter = () => {\r\n        const expanded = this.state.expanded\r\n        if(!expanded && this.state.selected === \"Select A Device\"){\r\n            return (<div className=\"selectDevice_center\" >{this.state.selected }<i className=\"fas fa-chevron-up\"></i></div>)\r\n        }else if(!expanded ){\r\n            return (<div className=\"selectDevice_center\" >Device: {this.state.selected }<i className=\"fas fa-chevron-up\"></i></div>)\r\n        }else{\r\n            //insert expanded center scroll view of dates\r\n            let list = this.mapList()\r\n            return (<div className={`selectDevice_center ${this.state.expanded}`}><ul>{list}</ul></div>)\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <button onClick={()=>{this.expand()}} className=\"selectDevice\">{this.renderCenter()}</button>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        device: state.device\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, actions)(SelectDevice)","import React, {useEffect, useState} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport gql from \"graphql-tag\"\r\nimport actions from '../../Actions'\r\nimport {  ApolloConsumer } from \"react-apollo\";\r\nimport Cookies from 'js-cookie'\r\n\r\nimport DeviceDropDown from './DeviceDropDown'\r\nimport Spinner from '../General/Spinner'\r\n\r\n\r\n\r\n//Can Add a device to a user\r\n//Can Change users selected device\r\n//Can Delete the selected device\r\n\r\nconst DELETE_DEVICE = gql`\r\n  mutation deleteDevice($data: DeleteDeviceInput!) {\r\n    deleteDevice(data: $data) {\r\n      id\r\n    }\r\n  }`\r\n\r\n  const ADD_DEVICE = gql`\r\n  mutation addDeviceToUser($data: AddDeviceToUserInput!) {\r\n    addDeviceToUser(data: $data) {\r\n        id\r\n      dev_name\r\n      settings{\r\n        light {average tol}\r\n        temp {average tol}\r\n        humidity {average tol}\r\n        moisture {average tol}\r\n      }  \r\n      records{\r\n        date\r\n        data{\r\n          time\r\n          light\r\n          temp\r\n          humidity\r\n          moisture\r\n        }\r\n      }\r\n    }\r\n  }`\r\n\r\n  const DeviceMenu = (props) =>  {\r\n\r\n    useEffect(()=>{},[props])\r\n\r\n\r\n    const [selDevice, setSelDevice] = useState(\"\")\r\n    const [inputDeviceName, setInputDeviceName] = useState(\"\")\r\n    const [delDevice, setDelDevice] = useState(\"\")\r\n    const [errorMsg, setErrorMsg] = useState(\"\")\r\n    const [loading, setLoading] = useState(false)\r\n\r\n\r\n    const setGQLError = (error) => {\r\n        const msg = error.message.slice(error.message.indexOf(\":\")+2)\r\n        setErrorMsg(msg)\r\n      }\r\n\r\n    const addDevice = (client) => {\r\n        setLoading(true)\r\n        if( inputDeviceName !== \"\" ){\r\n            const userId = props.user.id\r\n            const deviceName = inputDeviceName\r\n            addDeviceMutation({client, userId, deviceName})\r\n        }else{\r\n            setLoading(false)\r\n            setErrorMsg(\"Must Enter A New Device Name\")\r\n        }\r\n        \r\n        setInputDeviceName(\"\")\r\n    }\r\n\r\n    const deleteDevice = (client) => {\r\n        setLoading(true)\r\n        const device = props.devices.devices[delDevice]\r\n        const deviceId = device.id\r\n        deleteDeviceMutation({ deviceId, client })\r\n        props.deleteDevice(device.dev_name)\r\n    }\r\n\r\n    const selectDevice = () => {\r\n        if(selDevice !== \"\"){\r\n            const device = props.devices.devices[selDevice]\r\n            //set the selected device\r\n            props.setSelectedDevice(device.dev_name)\r\n            \r\n                 const records = device.records\r\n                 props.setDeviceRecords(records)\r\n             \r\n             props.closeModal()\r\n\r\n        }else{\r\n            setLoading(false)\r\n            setErrorMsg(\"Must select a device\")\r\n        }\r\n    }\r\n\r\n        ////////////////////////////////////////////////////////////////////////////////////\r\n    //Mutations\r\n    const addDeviceMutation = async ({ userId, deviceName, client }) => {\r\n        let token = await Cookies.get('xAuthG')\r\n    \r\n        const { data, error } = await client.mutate({\r\n          mutation:ADD_DEVICE,\r\n          variables:{data: { userId, deviceName, token }}\r\n        });\r\n        if(error){\r\n            setLoading(false)\r\n            setGQLError(error)\r\n        }else{\r\n            setLoading(false)\r\n            const { addDeviceToUser: device } = data\r\n            setErrorMsg(`New Device!      DeviceId: ${device.id}   -   UserId: ${props.user.id}`)\r\n            props.addDevice(device)\r\n        }\r\n      }\r\n    \r\n    const deleteDeviceMutation = async ({ deviceId, client }) => {\r\n        let token = await Cookies.get('xAuthG')\r\n    \r\n        const { error } = await client.mutate({\r\n          mutation:DELETE_DEVICE,\r\n          variables:{data: { deviceId, token }}\r\n        });\r\n        \r\n        if(error){\r\n            setLoading(false)\r\n            setGQLError(error)\r\n        }else{\r\n            setLoading(false)\r\n            props.closeModal()\r\n        }\r\n      }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n        return(\r\n            <div className=\"deviceMenu\">\r\n                <div className=\"deviceMenu_row\">\r\n                    <div className=\"dropdownContainer\">\r\n                        <DeviceDropDown select={setSelDevice}/>\r\n                    </div>  \r\n                    {loading ? <Spinner /> :\r\n                            <ApolloConsumer >\r\n                                {client => (                     \r\n                                    <button \r\n                                    onClick = {()=>{ selectDevice(client) }}\r\n                                    className=\"btn_primary btn_primary deviceMenu_btn\">\r\n                                        <span className=\"btn_primary-center\">Set Device</span>\r\n                                    </button> \r\n                                )}\r\n                            </ApolloConsumer>\r\n                        }\r\n                </div>\r\n\r\n                <h2 className=\"H_secondary H_secondary-sub\">OR</h2>\r\n\r\n                <div className=\"deviceMenu_row\">\r\n                    <input \r\n                        className=\"deviceMenu_input\" \r\n                        placeholder=\"Device Name:\"\r\n                        value = {inputDeviceName}\r\n                        onChange={(e)=>{setInputDeviceName(e.target.value)}}\r\n                    />\r\n                    {\r\n                        loading ? <Spinner /> :\r\n                        <ApolloConsumer >\r\n                            {client => ( \r\n                            <button \r\n                                onClick = {()=>{ addDevice(client) }}\r\n                                className=\"btn_primary btn_primary--add deviceMenu_btn\">\r\n                                <span className=\"btn_primary-center\">Add Device</span>\r\n                            </button>\r\n                            )}\r\n                        </ApolloConsumer>\r\n                    }\r\n                </div>\r\n\r\n                    <div className=\"deviceMenu_row\">\r\n                        <div className=\"dropdownContainer\">\r\n                            <DeviceDropDown select={setDelDevice}/>\r\n                        </div>  \r\n                        {\r\n                            loading ? <Spinner /> :\r\n                            <ApolloConsumer >\r\n                                {client => ( \r\n                                <button \r\n                                    onClick = {()=>{ deleteDevice(client) }}\r\n                                    className=\"btn_primary btn_primary--del deviceMenu_btn\">\r\n                                        <span className=\"btn_primary-center\">Del Device</span>\r\n                                </button>\r\n                                )}\r\n                            </ApolloConsumer>\r\n                        }\r\n                </div>\r\n                <p className=\"error\">{errorMsg}</p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user,\r\n        devices: state.device\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps , actions)(DeviceMenu)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// class DeviceMenu extends Component {\r\n\r\n//     state={\r\n//         selectedDevice: null,\r\n//         inputDeviceName: \"\",\r\n//         deleteDevice: null,\r\n//         errorMsg: null,\r\n//         loading: false\r\n//     }\r\n\r\n//     setError = (error) => {\r\n//         const msg = error.message.slice(error.message.indexOf(\":\")+2)\r\n//         this.setState({errorMsg: msg})\r\n//       }\r\n\r\n//     setSelected = (deviceName) => {\r\n//         this.setState({selectedDevice: deviceName})\r\n//     }\r\n\r\n//     setDeleteDevice = (deviceName) =>{\r\n//         this.setState({DeleteDevice: deviceName})\r\n//     }\r\n\r\n//     // button click actions\r\n\r\n//     deleteDevice = (deleteDev) => {\r\n//         this.setState({loading: true})\r\n//         //make sure the delete device is selected\r\n//         if(this.state.deleteDevice){\r\n//             const device = this.props.device.devices[this.state.deleteDevice]\r\n//             const id = device._id\r\n//             //update the global state\r\n//             this.props.deleteDevice(this.state.deleteDevice)\r\n//             //execute the deleteDevice mutatiom\r\n//             deleteDev({ variables: { \r\n//                             data: {\r\n//                                 deviceId: id\r\n//                                 } \r\n//                             } \r\n//                         })\r\n//         }else{\r\n//             this.setError({errorMsg: 'Must select a device to delete'})\r\n//         }\r\n//     }\r\n\r\n//     selectDevice = () => {\r\n//         if(this.state.selectedDevice){\r\n//            const devName = this.state.selectedDevice\r\n//             this.props.setSelectedDevice(devName)\r\n//         //fetch the device from state\r\n//              const devices = this.props.devices.devices\r\n//              const device = devices[devName]\r\n//              console.log(device)\r\n//              if(device.records.length > 0){\r\n//                  const records = device.records\r\n//                  this.props.setDeviceRecords(records)\r\n//              }\r\n//              this.props.closeModal()\r\n//          }\r\n//     }\r\n\r\n//     addDevice = (addDev) =>{\r\n//         this.setState({loading: true})\r\n//         if(this.state.inputDeviceName){\r\n//             const token = Cookies.get('xAuthG')\r\n//             //get the device id\r\n//              const deviceName = this.state.inputDeviceName\r\n//             //get the user id\r\n//              const userId = this.props.user.id\r\n// // console.log('ready for mutation')\r\n//             //execute add device mutation\r\n//             addDev({ variables: { \r\n//                 data: {\r\n//                     deviceName,\r\n//                     userId,\r\n//                     token\r\n//                     } \r\n//                 } \r\n//             })\r\n//         }\r\n//     }\r\n\r\n//     completeADD = (device) => {\r\n//         //set the device as the selected device\r\n//         this.setState({loading: false})\r\n//         this.setState({selectedDevice: device.dev_name})\r\n//         this.props.addDevice(device)\r\n//     }\r\n\r\n\r\n//     render(){\r\n//         return(\r\n//             <div className=\"deviceMenu\">\r\n//                 <div className=\"deviceMenu_row\">\r\n//                     <div className=\"dropdownContainer\">\r\n//                         <DeviceDropDown select={this.setSelected}/>\r\n//                     </div>  {this.state.loading ? <Spinner /> :                     \r\n//                                 <button \r\n//                                 onClick = {()=>{ this.selectDevice() }}\r\n//                                 className=\"btn_primary btn_primary deviceMenu_btn\">\r\n//                                     <span className=\"btn_primary-center\">Set Device</span>\r\n//                                 </button> \r\n//                             }\r\n//                 </div>\r\n\r\n//                 <h2 className=\"H_secondary H_secondary-sub\">OR</h2>\r\n\r\n//                 <div className=\"deviceMenu_row\">\r\n//                     <input \r\n//                         className=\"deviceMenu_input\" \r\n//                         placeholder=\"Device Name:\"\r\n//                         value = {this.state.inputDeviceId}\r\n//                         onChange={(e)=>{this.setState({inputDeviceName:e.target.value})}}\r\n//                     />\r\n\r\n//                     {\r\n//                         this.state.loading ? <Spinner /> : \r\n//                         <Mutation \r\n//                         mutation={ADD_DEVICE} \r\n//                         onError={(error)=>{\r\n//                             this.setState({loading: false})\r\n//                             this.setError(error)\r\n//                             }}\r\n//                         onCompleted={({addDeviceToUser})=>{ \r\n//                             this.completeADD(addDeviceToUser)\r\n//                         }}\r\n//                         >\r\n//                             { (addDeviceToUser, { data }) => (\r\n//                                     <button \r\n//                                     onClick = {()=>{ this.addDevice(addDeviceToUser) }}\r\n//                                     className=\"btn_primary btn_primary--add deviceMenu_btn\">\r\n//                                         <span className=\"btn_primary-center\">Add Device</span>\r\n//                                     </button>\r\n//                                 ) \r\n//                             }\r\n//                         </Mutation>\r\n//                     }\r\n \r\n//                 </div>\r\n\r\n//                 <div className=\"deviceMenu_row\">\r\n//                 <div className=\"dropdownContainer\">\r\n//                         <DeviceDropDown select={this.setDeleteDevice}/>\r\n//                     </div>  \r\n//                     {\r\n//                         this.state.loading ? <Spinner /> : \r\n//                         <Mutation \r\n//                         mutation={DELETE_DEVICE} \r\n//                         onError={(error)=>{\r\n                            \r\n//                             this.setError(error)\r\n//                         }}\r\n//                         onCompleted={()=>{ this.props.closeModal() }}\r\n//                         >\r\n//                             { (deleteDevice, { data }) => (\r\n//                                 <button \r\n//                                 onClick = {()=>{ this.deleteDevice(deleteDevice) }}\r\n//                                 className=\"btn_primary btn_primary--del deviceMenu_btn\">\r\n//                                     <span className=\"btn_primary-center\">Del Device</span>\r\n//                                 </button>\r\n//                                 ) \r\n//                             }\r\n//                         </Mutation> \r\n//                     }\r\n//                 </div>\r\n//                 <p className=\"error\">{this.state.errorMsg}</p>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// const mapStateToProps = (state) => {\r\n//     return {\r\n//         user: state.user,\r\n//         devices: state.device\r\n//     }\r\n// }\r\n\r\n// export default connect(mapStateToProps , actions)(DeviceMenu)\r\n\r\n\r\n","import React, {Component} from 'react'\r\nimport ModifyUser from './ModifyUser'\r\nimport DeviceMenu from './DeviceMenu'\r\n\r\nclass Modal extends Component {\r\n\r\n\r\n    closeModal = () => {\r\n        this.props.setModal()\r\n    }\r\n\r\n    renderForm = () => {\r\n        switch (this.props.menu) {\r\n            case \"userAccount\": return <div><ModifyUser closeModal={this.closeModal}/></div>\r\n            case \"deviceMenu\": return <div><DeviceMenu closeModal={this.closeModal}/></div>\r\n            default: return null\r\n        }\r\n    }\r\n\r\n    renderTitle = () => {\r\n        switch (this.props.menu) {\r\n            case \"userAccount\": return \"User Account\"\r\n            case \"deviceMenu\": return \"Device Menu\"\r\n            default: return null\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"modal\">\r\n                <div className=\"modal_content card\">\r\n                    <p \r\n                    onClick={()=>{this.closeModal()}}\r\n                    className=\"modal_close form_close\">X</p>\r\n                    <h2 className=\"modal_header H_secondary\">{this.renderTitle()}</h2>\r\n                    <div className=\"modal_body\">\r\n                        {this.renderForm()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Modal","import React, { Component } from 'react'\r\nimport {  connect } from 'react-redux'\r\nimport actions from '../../Actions'\r\n\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\nimport Cookies from 'js-cookie';\r\n\r\nimport Chart from './Chart'\r\nimport DataTable from './DataTable'\r\nimport DeviceInfo from './DeviceInfo'\r\nimport Gauges from './Gauges'\r\nimport Menu from './Menu'\r\nimport Modal from './Modal'\r\n\r\n\r\n\r\n//this query loads the user devices\r\nconst USER = gql`\r\nquery FindUser($data:FindUserInput){\r\n  findUser(data: $data){\r\n      id\r\n      email\r\n      device{\r\n      id\r\n      dev_name\r\n      settings{\r\n        light {average tol}\r\n        temp {average tol}\r\n        humidity {average tol}\r\n        moisture {average tol}\r\n      }  \r\n      records{\r\n        date\r\n        data{\r\n          time\r\n          light\r\n          temp\r\n          humidity\r\n          moisture\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n`  \r\n\r\n\r\n\r\n\r\n// on loading fetch user devices and records\r\n\r\nclass Dashboard extends Component {\r\n\r\n    state={\r\n        showModal: false,\r\n        menu: null,\r\n        token: null,\r\n    }\r\n\r\n    componentDidMount(){\r\n      this.setState({token: Cookies.get('xAuthG') })\r\n      this.props.updateUser({token: Cookies.get('xAuthG') }) \r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n      return(this.props.state !== nextProps)\r\n    }\r\n\r\n    setModal = () => {\r\n        const showModal = !this.state.showModal    \r\n        this.setState({showModal})\r\n    }\r\n\r\n    setMenu = (menu) => {\r\n        this.setState({menu})\r\n    }\r\n\r\n    parseQuery = ( data ) => {\r\n      const {id, email} = data\r\n      const user = {id, email}\r\n    //if no devices loaded set the devices attached to the user\r\n      const obj = this.props.device.devices\r\n        if(data.device !== [] && Object.keys(obj).length === 0 ){\r\n          let devices = data.device\r\n          if(devices.length !== 0){\r\n            this.props.updateDevices(devices)\r\n            //set the records of the first device to the selected records\r\n                  const records = devices[0].records\r\n                  if(records !== []){\r\n                    this.props.setDeviceRecords(records)\r\n                  }\r\n          }\r\n        }\r\n    //set the logged in user to the current user\r\n        if(this.props.user.id === null){\r\n          this.props.updateUser(user)\r\n        }\r\n    }\r\n\r\n    usr = (token) => (\r\n      <Query\r\n        query={USER}\r\n        variables={{data: {token}}}\r\n        onCompleted = {(data)=>{\r\n          this.parseQuery(data.findUser)\r\n        }}\r\n        onError = {\r\n          (error)=>{\r\n            console.log(error)\r\n          }\r\n        }\r\n      >\r\n        {({ loading, error, data }) => {\r\n          return (\r\n            <div className=\"dashboard\">\r\n              {this.state.showModal ? \r\n                <Modal setModal={this.setModal}  menu={this.state.menu}/> \r\n                : null }\r\n                <Menu setModal={this.setModal} setMenu={this.setMenu}  />\r\n                <Chart />\r\n                <DataTable />\r\n                <DeviceInfo />\r\n                <Gauges />\r\n            </div>\r\n          );\r\n        }}\r\n      </Query>\r\n    );\r\n\r\n\r\n    render(){\r\n\r\n        return(\r\n          <div>\r\n            {this.usr(this.state.token)} \r\n          </div>             \r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps=(state)=>{\r\n    return (\r\n        state\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, actions)(Dashboard)\r\n\r\n\r\n\r\n\r\n","import React, {Component} from 'react'\r\nimport {  BrowserRouter, Route } from 'react-router-dom'\r\n\r\nimport requiresAuth from './General/RequiresAuth'\r\n\r\n\r\n\r\nimport Landing      from \"./Landing/Landing\"\r\nimport Dashboard    from \"./Dashboard/Dashboard\"\r\n\r\nclass App extends Component {\r\n\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <BrowserRouter>\r\n                    <div>\r\n                        <Route path=\"/\" exact component={Landing}/>\r\n                        <Route path=\"/Dashboard\" exact component={ requiresAuth(Dashboard) }/>\r\n                    </div>\r\n                </BrowserRouter>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { ApolloProvider } from \"react-apollo\"\r\nimport { ApolloClient } from 'apollo-client';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { split } from 'apollo-link';\r\nimport { HttpLink } from 'apollo-link-http';\r\nimport { WebSocketLink } from 'apollo-link-ws';\r\nimport { getMainDefinition } from 'apollo-utilities';\r\n\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { Provider } from 'react-redux'\r\nimport reducer from './Reducers'\r\n\r\nimport './Components/Styles/index.scss'\r\n\r\nimport App from './Components/App'\r\n\r\n// Create an http link:\r\nconst httpLink = new HttpLink({\r\n    uri: 'https://growctrl.herokuapp.com/gql'\r\n  });\r\n  \r\n// Create a WebSocket link:\r\nconst wsLink = new WebSocketLink({\r\n    uri: 'wss://growctrl.herokuapp.com/subscribe',\r\n    options: {\r\n        reconnect: true\r\n    }\r\n});\r\n\r\n// split based on operation type\r\nconst link = split(\r\n    ({ query }) => {\r\n        const { kind, operation } = getMainDefinition(query);\r\n        return kind === 'OperationDefinition' && operation === 'subscription';\r\n    },\r\n    wsLink,\r\n    httpLink\r\n);\r\n\r\nconst client = new ApolloClient({\r\n  link,\r\n  cache: new InMemoryCache()\r\n});\r\n\r\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(), ));\r\n\r\nReactDOM.render(\r\n    <ApolloProvider client={client}>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </ApolloProvider>\r\n, document.getElementById('root'));\r\n"],"sourceRoot":""}
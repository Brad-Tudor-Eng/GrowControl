# ---------------Base Query, Mutation, Subscriptions----------------#
type Query{
    user(data: FindUserInput ): User!

}

type Mutation {
    createUser(data: CreateUserInput): User!
    updateUser(data: UpdateUserInput): User!
    deleteUser(data: DeleteUserInput): User!

    addDevice(data: AddDeviceInput): Device
    updateDevice(data: UpdateDeviceInput): Device
    # deleteDevice(data: DeleteDeviceInput): Device
}

# type Subscription{
#     data: DataType!
# }
# -------------------------Input Types----------------------------#

#_______________-User-_____________________#
input CreateUserInput{
    name: String!
    email: String!
    password: String
}

input FindUserInput{
    id: ID,
    email: String
}

input UpdateUserInput{
    id: ID!,
    email: String
    password: String
}

input DeleteUserInput{
    id: ID!
}

#_______________-Device-_____________________#

input AddDeviceInput{
    name: String!
    userID: ID!
}

input UpdateDeviceInput{
    id: ID!
    userID: ID
    name: String
    settings: SettingsTypeInput
}

input SettingsTypeInput{
    light: SettingTypeInput
    temp: SettingTypeInput
    humidity: SettingTypeInput
    moisture: SettingTypeInput
}

input SettingTypeInput{
    average: Float
    tol: Float
}


# -------------------------Data Types----------------------------#
type User {
    id: ID!
    name: String!
    email: String!
    devices: [Device]
}

type Device {
    id: ID!
    dev_name: String!
    user: User!
    settings: SettingsType!
    records: [ RecordType ]
}

type SettingsType {
    light: SettingType!
    temp: SettingType!
    humidity: SettingType!
    moisture: SettingType!
}

type SettingType {
    average: Float!
    tol: Float!
}

type RecordType{
    date: String!
    data: [ DataType ]
}

type DataType{
    time: String!
    light: Float
    temp: Float
    humidity: Float
    moisture: Float
}
# -------------------------Subscription Payloads----------------------------#


type DataSubscriptionPayload {
    data: DataType!
    mutation: String!
}
